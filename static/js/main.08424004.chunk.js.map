{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","preparedGoods","map","good","name","id","uuidv4","sectedValues","Array","num","i","App","useState","NONE","sortType","setSortType","startWork","setStartWork","isReversed","setIsReversed","charsLimit","setCharsLimit","goods","visibleGoods","filter","length","ALPHABET","sort","good1","good2","localeCompare","LENGTH","reverse","getReorderedGoods","className","type","onClick","cn","value","onChange","e","currentTarget","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,sFAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAWL,IAAMC,EAAgB,UAxBY,CAChC,YACA,kBACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,WAcyCC,KAAI,SAAAC,GAAI,MAAK,CACtDC,KAAMD,EACNE,GAAIC,cAF6C,IAqC/CC,EAAe,IAAIC,MAAM,IAE7BD,EAAe,YAAIA,GAAcL,KAAI,SAACO,EAAKC,GAKzC,OAFIA,EAAI,CAGT,IAEM,IAAMC,EAAgB,WAC3B,MAAgCC,mBAASZ,EAASa,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEMC,EAhDkB,SACxBA,EACAR,EACAI,EACAE,GAEA,IAAMG,EAAe,YAAID,GACtBE,QAAO,SAAArB,GAAI,OAAIA,EAAKC,KAAKqB,QAAUL,CAAxB,IAEd,OAAQN,GACN,KAAKd,EAAS0B,SACZH,EAAaI,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMxB,KAAK0B,cAAcD,EAAMzB,KAAjD,IAClB,MAEF,KAAKJ,EAAS+B,OACZR,EAAaI,MACX,SAACC,EAAOC,GAAR,OAAkBD,EAAMxB,KAAKqB,OAASI,EAAMzB,KAAKqB,MAAjD,IAIJ,KAAKzB,EAASa,MAShB,OAJIK,GACFK,EAAaS,UAGRT,CACR,CAkBeU,CACZhC,EACAa,EACAI,EACAE,GASF,OACE,sBAAKc,UAAU,MAAf,WACIlB,GACA,wBACEmB,KAAK,SACLD,UAAU,4CACVE,QAAS,kBAAMnB,GAAa,EAAnB,EAHX,mBASDD,GACC,sBAAKkB,UAAU,wCAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWG,IACT,qBAAsB,CACpB,cAAevB,IAAad,EAAS0B,WAGzCU,QAAS,kBAAMrB,EAAYf,EAAS0B,SAA3B,EAPX,iCAYA,wBACES,KAAK,SACLD,UAAWG,IACT,qBAAsB,CACpB,cAAevB,IAAad,EAAS+B,SAGzCK,QAAS,kBAAMrB,EAAYf,EAAS+B,OAA3B,EAPX,4BAYA,wBACEI,KAAK,SACLC,QAAS,kBAAMjB,GAAeD,EAArB,EACTgB,UAAWG,IAAG,sBAAuB,CACnC,eAA8B,IAAfnB,IAJnB,qBAUA,qBAAKgB,UAAU,2BAAf,SACE,wBACEA,UAAU,uCACVI,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,GAAemB,EAAEC,cAAcH,MAAtC,EAHZ,SAKG/B,EAAaL,KAAI,SAAAO,GAAG,OACnB,wBAAQ6B,MAAO7B,EAAf,SAA+BA,GAANA,EADN,QAOzB,wBACE0B,KAAK,SACLC,QAtEE,WACZjB,GAAc,GACdJ,EAAYf,EAASa,MACrBQ,EAAc,EACf,EAmEWa,UAAU,uBAHZ,sBAUF,oBAAIA,UAAU,QAAd,SACGZ,EAAMpB,KAAI,SAAAC,GAAI,OACb,oBAAkB+B,UAAU,cAA5B,SACG/B,EAAKC,MADCD,EAAKE,GADD,WAU1B,EC/KDqC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.08424004.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport cn from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'CsectedValuesot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ninterface Good {\n  name: string,\n  id: string,\n}\n\nconst preparedGoods = [...goodsFromServer].map(good => ({\n  name: good,\n  id: uuidv4(),\n}));\n\nconst getReorderedGoods = (\n  goods: Good[],\n  sortType: SortType,\n  isReversed: boolean,\n  charsLimit: number,\n) => {\n  const visibleGoods = [...goods]\n    .filter(good => good.name.length >= charsLimit);\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => good1.name.localeCompare(good2.name));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort(\n        (good1, good2) => good1.name.length - good2.name.length,\n      );\n      break;\n\n    case SortType.NONE:\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n};\n\nlet sectedValues = new Array(10);\n\nsectedValues = [...sectedValues].map((num, i) => {\n  let n = num;\n\n  n = i + 1;\n\n  return n;\n});\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [startWork, setStartWork] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [charsLimit, setCharsLimit] = useState(1);\n\n  const goods = getReorderedGoods(\n    preparedGoods,\n    sortType,\n    isReversed,\n    charsLimit,\n  );\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n    setCharsLimit(1);\n  };\n\n  return (\n    <div className=\"App\">\n      {!startWork && (\n        <button\n          type=\"button\"\n          className=\"button is-link is-outlined is-large start\"\n          onClick={() => setStartWork(true)}\n        >\n          Start\n        </button>\n      )}\n\n      {startWork && (\n        <div className=\"box has-background-link-light contant\">\n          <div className=\"buttons\">\n            <button\n              type=\"button\"\n              className={cn(\n                'button is-link btn', {\n                  'is-inverted': sortType === SortType.ALPHABET,\n                },\n              )}\n              onClick={() => setSortType(SortType.ALPHABET)}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              className={cn(\n                'button is-link btn', {\n                  'is-inverted': sortType === SortType.LENGTH,\n                },\n              )}\n              onClick={() => setSortType(SortType.LENGTH)}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => setIsReversed(!isReversed)}\n              className={cn('button is-link  btn', {\n                'is-inverted': isReversed === true,\n              })}\n            >\n              Reverse\n            </button>\n\n            <div className=\"select is-link salaction\">\n              <select\n                className=\"has-background-link-light is-warning\"\n                value={charsLimit}\n                onChange={(e) => setCharsLimit(+e.currentTarget.value)}\n              >\n                {sectedValues.map(num => (\n                  <option value={num} key={num}>{num}</option>\n\n                ))}\n              </select>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={reset}\n              className=\"button is-danger btn\"\n            >\n              Reset\n            </button>\n\n          </div>\n\n          <ul className=\"Goods\">\n            {goods.map(good => (\n              <li key={good.id} className=\"Goods__item\">\n                {good.name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}